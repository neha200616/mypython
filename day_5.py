# -*- coding: utf-8 -*-
"""day-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fe9rWrmnhkgxXMxJZJTfvMkZLK21BdXL
"""

#Create a Simple Class:
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        print(f"{self.name} says Woof! I am {self.age} years old.")

dog1 = Dog("Buddy", 3)
dog2 = Dog("Lucy", 5)

dog1.bark()
dog2.bark()

class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year

    def display_info(self):
        print(f"{self.year} {self.make} {self.model}")

my_car = Car("Toyota", "Camry", 2020)

my_car.display_info()

#Creating Multiple Objects
class Person:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city

    def introduce(self):
        print(f"Hi, I'm {self.name}, {self.age} years old, from {self.city}.")

person1 = Person("Alice", 30, "New York")
person2 = Person("Bob", 25, "Los Angeles")
person3 = Person("Charlie", 35, "Chicago")

person1.introduce()
person2.introduce()
person3.introduce()

#Encapsulation Example
class Person:
    def __init__(self, name, age):
        self.name = name
        self.__age = age

    def get_age(self):
        return self.__age

    def set_age(self, age):
        if age >= 0:
            self.__age = age
        else:
            print("Age cannot be negative.")

person = Person("John", 25)


print(person.get_age())

person.set_age(30)
print(person.get_age())

#Class Inheritance
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"{self.name} makes a sound.")

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed



dog = Dog("Buddy", "Golden Retriever")

dog.speak()

class Vehicle:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def display_info(self):
        print(f"Brand: {self.brand}, Model: {self.model}")

class Car(Vehicle):
    def __init__(self, brand, model, number_of_doors):
        super().__init__(brand, model)
        self.number_of_doors = number_of_doors

    def display_info(self):
        super().display_info()
        print(f"Number of doors: {self.number_of_doors}")

car = Car("Toyota", "Camry", 4)


car.display_info()
print()

#Multiple Inheritance
class Mammal:
    def __init__(self, has_fur):
        self.has_fur = has_fur

    def has_fur_check(self):
        if self.has_fur:
            print("This animal has fur.")
        else:
            print("This animal does not have fur.")

class Dog(Animal, Mammal):
    def __init__(self, name, has_fur, breed):
        Animal.__init__(self, name)
        Mammal.__init__(self, has_fur)
        self.breed = breed

    def display_info(self):
        print(f"Name: {self.name}, Breed: {self.breed}")
        self.speak()
        self.has_fur_check()
dog = Dog("Buddy", True, "Golden Retriever")

dog.display_info()

#Multilevel Inheritance
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display_person_info(self):
        print(f"Name: {self.name}, Age: {self.age}")


class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def display_student_info(self):
        print(f"Student ID: {self.student_id}")

class GraduateStudent(Student):
    def __init__(self, name, age, student_id, thesis_title):
        super().__init__(name, age, student_id)
        self.thesis_title = thesis_title

    def display_graduate_student_info(self):
        print(f"Thesis Title: {self.thesis_title}")

grad_student = GraduateStudent("John Doe", 24, "S12345", "AI in Healthcare")

grad_student.display_person_info()
grad_student.display_student_info()
grad_student.display_graduate_student_info()

#.Polymorphism with Functions
class Dog:
    def speak(self):
        print("Woof! Woof!")

class Cat:
    def speak(self):
        print("Meow! Meow!")

def animal_sound(animal):
    animal.speak()


dog = Dog()
cat = Cat()

animal_sound(dog)
animal_sound(cat)

# Polymorphism with Inheritance
class Dog:
    def speak(self):
        print("Woof! Woof!")


class Cat:
    def speak(self):
        print("Meow! Meow!")
def animal_sound(animal):
    animal.speak()

dog = Dog()
cat = Cat()

animal_sound(dog)
animal_sound(cat)

#Using the super() Method:

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"{self.name} makes a sound")
class Dog(Animal):
    def __init__(self, name, breed):

        super().__init__(name)
        self.breed = breed

    def speak(self):
        super().speak()
        print(f"{self.name} barks!")

dog = Dog("Buddy", "Golden Retriever")

dog.speak()

#Class Method and Static Method:
class Person:

    population = 0

    def __init__(self, name, age):
        self.name = name
        self.age = age
        Person.population += 1

    @classmethod
    def get_population(cls):
        print(f"Current population: {cls.population}")

    @staticmethod
    def greet():
        print("Hello! How are you?")

    def display(self):
        print(f"Name: {self.name}, Age: {self.age}")

person1 = Person("John", 25)
person2 = Person("Jane", 30)

Person.get_population()

Person.greet()
person1.display()

#Operator Overloading
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y


    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def __repr__(self):
        return f"Point({self.x}, {self.y})"

point1 = Point(2, 3)
point2 = Point(4, 5)

result = point1 + point2
print(result)

#Counting Instances of a Class:
class MyClass:
    instance_count = 0
    def __init__(self):
        MyClass.instance_count += 1
    @classmethod
    def get_instance_count(cls):

        return cls.instance_count

obj1 = MyClass()
obj2 = MyClass()
obj3 = MyClass()
print("Number of instances created:", MyClass.get_instance_count())

#Composition in Classes
class Engine:
    def __init__(self, engine_type, horsepower):
        self.engine_type = engine_type
        self.horsepower = horsepower

    def start(self):
        print(f"The {self.engine_type} engine with {self.horsepower} horsepower is starting.")

    def stop(self):
        print(f"The {self.engine_type} engine is stopping.")

class Car:
    def __init__(self, make, model, engine_type, horsepower):
        self.make = make
        self.model = model
        self.engine = Engine(engine_type, horsepower)

    def start(self):
        print(f"Starting the {self.make} {self.model}")
        self.engine.start()

    def stop(self):
        print(f"Stopping the {self.make} {self.model}")
        self.engine.stop()
my_car = Car("Toyota", "Camry", "V6", 300)
my_car.start()
my_car.stop()

from abc import ABC, abstractmethod

# Abstract Base Class
class Vehicle(ABC):
    @abstractmethod
    def start(self):
        pass

    @abstractmethod
    def stop(self):
        pass


class Car(Vehicle):
    def __init__(self, model):
        self.model = model


    def start(self):
        print(f"The {self.model} car is starting.")

    def stop(self):
        print(f"The {self.model} car is stopping.")

car = Car("Toyota Corolla")

car.start()
car.stop()

from abc import ABC, abstractmethod

class PaymentMethod(ABC):
    @abstractmethod
    def process_payment(self, amount):
        pass

class CreditCard(PaymentMethod):
    def __init__(self, card_number):
        self.card_number = card_number

    def process_payment(self, amount):
        print(f"Processing payment of ${amount} using Credit Card ending with {self.card_number[-4:]}.")


class PayPal(PaymentMethod):
    def __init__(self, email):
        self.email = email

    def process_payment(self, amount):
        print(f"Processing payment of ${amount} using PayPal account: {self.email}.")

credit_card = CreditCard("1234567890123456")


credit_card.process_payment(100)
paypal_account.process_payment(50)

#Using Getters and Setters:
class Person:
    def __init__(self, name, age):
        self.name = name
        self._age = age

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, value):
        if value < 0:
            print("Age cannot be negative!")
        else:
            self._age = value
person = Person("Alice", 30)
print(f"{person.name} is {person.age} years old.")
person.age = 35
print(f"{person.name} is now {person.age} years old.")
person.age = -5

#Dunder Methods:
class Book:
    def __init__(self, title, author, year):
        self.title = title
        self.author = author
        self.year = year

    def __str__(self):
        return f"'{self.title}' by {self.author} ({self.year})"


    def __repr__(self):
        return f"Book('{self.title}', '{self.author}', {self.year})"

book = Book("1984", "George Orwell", 1949)

print(book)

print(repr(book))